rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Product images - public read, admin write (SIMPLE VERSION)
    match /products/{productId}/{imageId} {
      allow read: if true;
      // Simple admin check - just verify user exists in adminUsers collection
      allow write: if request.auth != null 
        && exists(/databases/(default)/documents/adminUsers/$(request.auth.uid));
    }

    // Product variant images - same simple logic
    match /products/{productId}/variants/{variantId}/{imageId} {
      allow read: if true;
      allow write: if request.auth != null 
        && exists(/databases/(default)/documents/adminUsers/$(request.auth.uid));
    }

    // Category images - same simple logic  
    match /categories/{categoryId}/{imageId} {
      allow read: if true;
      allow write: if request.auth != null 
        && exists(/databases/(default)/documents/adminUsers/$(request.auth.uid));
    }

    // Admin uploads - same simple logic
    match /admin/{path=**} {
      allow read, write: if request.auth != null 
        && exists(/databases/(default)/documents/adminUsers/$(request.auth.uid));
    }

    // Banner images - public read, admin write
    match /banners/{bannerId} {
      allow read: if true;
      allow write: if request.auth != null 
        && exists(/databases/(default)/documents/adminUsers/$(request.auth.uid));
    }

    // User profile images - users can upload their own OR admin can upload any
    match /users/{userId}/profile/{imageId} {
      allow read: if true;
      allow write: if request.auth != null && 
        (request.auth.uid == userId || 
         exists(/databases/(default)/documents/adminUsers/$(request.auth.uid)));
    }

    // Temp uploads - any authenticated user
    match /temp/{userId}/{uploadId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow delete: if true;
    }

    // Basic file validation - keep files under 20MB and only allow images
    match /{allPaths=**} {
      allow write: if request.resource.size < 20 * 1024 * 1024
        && request.resource.contentType.matches('image/.*');
    }
  }
}